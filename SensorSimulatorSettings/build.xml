<?xml version="1.0" encoding="UTF-8"?>
<project name="SensorSimulatorSettings" default="help">
<!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     If Eclipse does not let you build the project because
     it claims the "help" target above does not exist,
     go to Window->preferences->Ant->Editor->Problems tab
     and add "build.xml" to the ignore list.
     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-->
	
<!-- #############################################
     OpenIntents modifications to build.xml follow
     ############################################# -->

    <!-- Private build properties are not shared via svn, 
         developers must have there own copy. -->	 
    <property file="build-private.properties" />

	<!-- Read manifest properties , e.g. 
	     manifest(android:versionName) or manifest.package -->
	<xmlproperty file="AndroidManifest.xml" />
	<property name="version" value="${manifest(android:versionName)}" />

	<!-- Overwrite default release file name -->
    <property name="out.release.file.name"
                  value="${ant.project.name}-${version}.apk" />

	<!-- Path for library jar file -->
    <property name="out.lib.file.name"
                  value="sensorsimulator-lib-${version}.jar" />

	<!-- Path for java doc -->
    <property name="out.doc.dir"
                  value="doc" />
	
<!-- ################################################
     The default Android 2.3 build.xml script follows
     ################################################ -->

<!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
    <property file="local.properties" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the
         default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android'
         tool, as well as ADT.
         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <property file="default.properties" />

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

    <import file="custom_rules.xml" optional="true" />
    <import file="${sdk.dir}/tools/ant/build.xml" />

<!-- extension targets. Uncomment the ones where you want to do custom work
     in between standard targets -->
<!--
    <target name="-pre-build">
    </target>
    <target name="-pre-compile">
    </target>

    [This is typically used for code obfuscation.
     Compiled code location: ${out.classes.absolute.dir}
     If this is not done in place, override ${out.dex.input.absolute.dir}]
    <target name="-post-compile">
    </target>
-->


    <!-- Execute the Android Setup task that will setup some properties
         specific to the target, and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <setup> task.
             - customize it to your needs.
         - Customize the whole script.
             - copy/paste the content of the rules files (minus the top node)
               into this file, *after* the <setup> task
             - disable the import of the rules by changing the setup task
               below to <setup import="false" />.
             - customize to your needs.
    -->


<!-- #############################################
     OpenIntents modifications to build.xml follow
     ############################################# -->

	<!-- ############### Install-release ################ -->
	
	<target name="install-release" depends="release">
		<echo>Reinstalling ${out.release.file.name} onto default emulator or device...</echo>
		<exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}" />
			<arg value="install" />
			<arg value="-r" />
			<arg value="${out.release.file}" />
		</exec>
	</target>
	
	<!-- ############### Library jar file ################ -->
	
	<!-- Create the library -->
	<!-- Content is defined in "build-lib-content.txt" -->
    <property name="out.lib.file"
            location="${out.absolute.dir}/${out.lib.file.name}" />
	<target name="lib"  depends="debug" >
		<jar
			destfile="${out.lib.file}"
			basedir="${out.classes.absolute.dir}"
			includesfile="build-lib-content.txt" >
		</jar>
	</target> 
	
	<!-- ############### JavaDoc ####################### -->
	<!-- Create JavaDoc -->
	<target name="javadoc">
		<delete dir="${out.doc.dir}" />
		<javadoc access="public" author="true" destdir="${out.doc.dir}" 
        	nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
        	source="1.6" sourcepath="${source.absolute.dir}" splitindex="true" use="true" version="true">
        </javadoc>
    </target>
		
	<!-- ############ Convencience target ############## -->
	<target name="all" 
		depends="release, lib, javadoc" />

</project>
